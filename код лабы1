import numpy as np
import matplotlib.pyplot as plt

def main():
    # 1. Создание массивов в NumPy
    # ------ добавьте свой код --------

    # 1) Матрица 2х3, заполненная значениями от 1 до 6
    d1 = np.array([[1, 2, 3], [4, 5, 6]])

    # 2) Матрица 3х2, заполненная нулями
    d2 = np.zeros((3, 2))

    # 3) Матрица 2х2, заполненная единицами
    d3 = np.ones((2, 2))

    # 4) Единичная матрица 2х2
    d4 = np.eye(2)

    # 5) Массив длиной 200, заполненный значениями от 1 до 200
    d5 = np.arange(1, 201)

    # 6) Массив длиной 10000, заполненный случайными целыми числами от -10 до 10
    d6 = np.random.randint(-10, 11, size=10000)

    # 7) Матрица 100х100, заполненная случайными целыми числами от -2 до 2
    d7 = np.random.randint(-2, 3, size=(100, 100))

    # Вывод результатов
    print(f"d1: Размер: {d1.shape} Сумма: {np.sum(d1)}")
    print(f"d2: Размер: {d2.shape} Сумма: {np.sum(d2)}")
    print(f"d3: Размер: {d3.shape} Сумма: {np.sum(d3)}")
    print(f"d4: Размер: {d4.shape} Сумма: {np.sum(d4)}")
    print(f"d5: Размер: {d5.shape} Сумма: {np.sum(d5)}")
    print(f"d6: Размер: {d6.shape} Сумма: {np.sum(d6)}")
    print(f"d7: Размер: {d7.shape} Сумма: {np.sum(d7)}")

    input('Перейдите в терминал и нажмите Enter для продолжения...')
    # return  # Комментируйте эту строку, чтобы продолжить

    # 2. Размеры, индексация, срезы и копирование
    # ------ добавьте свой код --------

    # 1) Матрица 4х4, заполненная нулями
    d1 = np.zeros((4, 4))

    # 2) Матрица 4х4, заполненная единицами
    d2 = np.ones((4, 4))

    # 3) Заменяем второй столбец и вторую строку
    d2[:, 1] = d1[:, 1]
    d2[1, :] = d1[1, :]

    # 4) Преобразование массива из 20 чисел в матрицу 5х4
    d3 = np.arange(1, 21)
    d4 = d3.reshape(5, 4)

    # 5) Добавление столбца из единиц к матрице d4
    d5 = np.hstack((np.ones((5, 1)), d4))

    input('Перейдите в терминал и нажмите Enter для продолжения...')
    # return  # Комментируйте эту строку, чтобы продолжить

    # 3. Логические условия
    # ------ добавьте свой код --------

    # 1) Матрица 4х5, заполненная числами от 1 до 20
    d1 = np.arange(1, 21).reshape(4, 5)

    # 2) Массив из всех элементов d1, которые больше или равны 3 и меньше или равны 13
    d2 = d1[(d1 >= 3) & (d1 <= 13)]

    input('Перейдите в терминал и нажмите Enter для продолжения...')
    # return  # Комментируйте эту строку, чтобы продолжить

    # 4. Функции
    # ------ добавьте свой код --------

    # 1) Массив из 1000 случайных целых чисел в диапазоне от 1 до 3
    d1 = np.random.randint(1, 4, size=1000)
    d1m = np.mean(d1)
    d1s = np.std(d1)

    # 2) Матрица 100х100 действительных чисел в диапазоне от 5 до 7
    d2 = np.random.uniform(5, 7, size=(100, 100))
    d2m = np.mean(d2)
    d2s = np.std(d2)

    input('Перейдите в терминал и нажмите Enter для продолжения...')
    # return  # Комментируйте эту строку, чтобы продолжить

    # 5. Линейная алгебра
    # ------ добавьте свой код --------

    # 1) Вычисление 2∙[243]
    dr1 = 2 * np.array([243])

    # 2) [123321]×[654]
    dr2 = np.dot(np.array([123321]), np.array([654]))

    # 3) [12]×[34]
    dr3 = np.dot(np.array([12]), np.array([34]))

    # 4) 2∙[132451]×[32]×[321]+𝐼3−10
    dr4 = 2 * np.dot(np.array([132451]), np.array([32])) * np.array([321]) + np.eye(3) - 10

    input('Перейдите в терминал и нажмите Enter для продолжения...')
    # return  # Комментируйте эту строку, чтобы продолжить

    # 6. Построение графиков функций
    # ------ добавьте свой код --------

    z = np.linspace(-6, 6, 100)
    g = 1 / (1 + np.exp(-z))

    plt.plot(z, g)
    plt.title("Сигмовидная функция")
    plt.xlabel("z")
    plt.ylabel("g(z)")
    plt.grid()
    plt.show()

if __name__ == "__main__":
    main()
